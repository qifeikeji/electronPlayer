# GitHub Action for ElectronPlayer Linux AppImage
# Êñá‰ª∂Ë∑ØÂæÑ: .github/workflows/build-linux.yml

name: Build Linux AppImage

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libnss3-dev \
          libatk-bridge2.0-dev \
          libdrm2 \
          libxkbcommon-dev \
          libxss1 \
          libasound2-dev \
          libgtk-3-dev \
          libxrandr2 \
          libpangocairo-1.0-0 \
          libatk1.0-0 \
          libcairo-gobject2 \
          libgtk-3-0 \
          libgdk-pixbuf2.0-0
        
    - name: Clean and install dependencies
      run: |
        echo "üßπ Cleaning existing files..."
        rm -rf node_modules
        rm -f package-lock.json
        rm -f yarn.lock
        
        echo "üì¶ Installing dependencies..."
        npm install
        
        echo "üîß Installing missing dependencies..."
        npm install --save-dev @vitejs/plugin-react-swc
        
        if ! npm list electron-builder &>/dev/null; then
          echo "Installing electron-builder..."
          npm install -g electron-builder
        fi
        
        echo "‚úÖ Dependencies installed"
        
    - name: Create Electron main process
      run: |
        echo "üìÅ Setting up Electron structure..."
        mkdir -p dist-electron
        mkdir -p dist
        
        # Ê£ÄÊü•ÊòØÂê¶Â∑≤Êúâ‰∏ªËøõÁ®ãÊñá‰ª∂
        if [ -f "electron/main.js" ]; then
          cp electron/main.js dist-electron/main.js
          echo "Copied existing main.js from electron/"
        elif [ -f "src/main.js" ]; then
          cp src/main.js dist-electron/main.js
          echo "Copied existing main.js from src/"
        elif [ -f "main.js" ]; then
          cp main.js dist-electron/main.js
          echo "Copied existing main.js from root"
        else
          echo "Creating basic main.js..."
          cat > dist-electron/main.js << 'EOF'
        const { app, BrowserWindow } = require('electron');
        const path = require('path');

        let mainWindow;

        const createWindow = () => {
          mainWindow = new BrowserWindow({
            width: 1200,
            height: 800,
            webPreferences: {
              nodeIntegration: true,
              contextIsolation: false
            }
          });

          mainWindow.loadFile(path.join(__dirname, '../dist/index.html'));
          
          mainWindow.on('closed', () => {
            mainWindow = null;
          });
        };

        app.whenReady().then(createWindow);

        app.on('window-all-closed', () => {
          if (process.platform !== 'darwin') {
            app.quit();
          }
        });

        app.on('activate', () => {
          if (BrowserWindow.getAllWindows().length === 0) {
            createWindow();
          }
        });
        EOF
        fi
        
    - name: Build frontend (with fallback)
      run: |
        echo "üî® Building frontend..."
        
        if npm run build; then
          echo "‚úÖ Frontend build successful"
        else
          echo "‚ö†Ô∏è Frontend build failed, creating fallback..."
          mkdir -p dist
          cat > dist/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>ElectronPlayer</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    margin: 0;
                    padding: 0;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                }
                .container {
                    text-align: center;
                    background: rgba(255,255,255,0.1);
                    padding: 2rem;
                    border-radius: 10px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üé¨ ElectronPlayer</h1>
                <p>Modern Media Player</p>
                <p>Built with Electron</p>
            </div>
        </body>
        </html>
        EOF
        fi
      env:
        CI: false
        
    - name: Build Electron application
      run: |
        echo "‚ö° Building Electron AppImage..."
        
        if npm run electron:build; then
          echo "‚úÖ Built with electron:build"
        elif npm run build:linux; then
          echo "‚úÖ Built with build:linux"
        elif npm run dist; then
          echo "‚úÖ Built with dist"
        else
          echo "üîß Using direct electron-builder..."
          npx electron-builder --linux appimage --publish never
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Find AppImage
      id: find_appimage
      run: |
        echo "üîç Looking for AppImage..."
        
        APPIMAGE_PATH=$(find . -name "*.AppImage" -type f | head -1)
        
        if [ -n "$APPIMAGE_PATH" ] && [ -f "$APPIMAGE_PATH" ]; then
          echo "‚úÖ Found AppImage: $APPIMAGE_PATH"
          echo "appimage_path=$APPIMAGE_PATH" >> $GITHUB_OUTPUT
          echo "appimage_name=$(basename $APPIMAGE_PATH)" >> $GITHUB_OUTPUT
          echo "appimage_size=$(du -h $APPIMAGE_PATH | cut -f1)" >> $GITHUB_OUTPUT
          
          ls -lh "$APPIMAGE_PATH"
          chmod +x "$APPIMAGE_PATH"
        else
          echo "‚ùå No AppImage found!"
          find . -name "*electron*" -o -name "*app*" | head -10
          exit 1
        fi
        
    - name: Upload AppImage
      uses: actions/upload-artifact@v4
      with:
        name: ElectronPlayer-Linux-${{ github.run_number }}
        path: ${{ steps.find_appimage.outputs.appimage_path }}
        retention-days: 30
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ steps.find_appimage.outputs.appimage_path }}
        name: Release ${{ github.ref_name }}
        body: |
          ## üé¨ ElectronPlayer Linux AppImage
          
          üì¶ **File**: `${{ steps.find_appimage.outputs.appimage_name }}`
          üìè **Size**: ${{ steps.find_appimage.outputs.appimage_size }}
          
          ### üöÄ Installation
          ```bash
          chmod +x ${{ steps.find_appimage.outputs.appimage_name }}
          ./${{ steps.find_appimage.outputs.appimage_name }}
          ```
          
          ### ‚ú® Features
          - Cross-platform media player
          - Modern Electron interface
          - Multiple format support
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
