# GitHub Action for building ElectronPlayer Linux AppImage
# Place this file at: .github/workflows/build-linux.yml

name: Build Linux AppImage

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # 允许手动触发构建

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libnss3-dev \
          libatk-bridge2.0-dev \
          libdrm2 \
          libxkbcommon-dev \
          libxss1 \
          libasound2-dev \
          libgtk-3-dev \
          libxrandr2 \
          libasound2-dev \
          libpangocairo-1.0-0 \
          libatk1.0-0 \
          libcairo-gobject2 \
          libgtk-3-0 \
          libgdk-pixbuf2.0-0
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build React app
      run: |
        # 根据项目的构建脚本调整，可能是以下之一：
        npm run build || npm run electron:build || npm run dist || echo "Build command not found, trying alternative methods"
      env:
        CI: false
        
    - name: Build Electron app for Linux
      run: |
        # 尝试不同的Electron构建命令
        if npm run electron:build; then
          echo "Built with electron:build"
        elif npm run build:linux; then
          echo "Built with build:linux" 
        elif npm run dist; then
          echo "Built with dist"
        elif npx electron-builder --linux; then
          echo "Built with electron-builder directly"
        else
          echo "No suitable build command found"
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: List all build outputs (debug)
      run: |
        echo "=== Project root contents ==="
        ls -la
        echo "=== Looking for common build directories ==="
        ls -la dist/ 2>/dev/null || echo "No dist/ directory"
        ls -la build/ 2>/dev/null || echo "No build/ directory" 
        ls -la out/ 2>/dev/null || echo "No out/ directory"
        ls -la release/ 2>/dev/null || echo "No release/ directory"
        echo "=== Searching for AppImage files ==="
        find . -name "*.AppImage" -type f 2>/dev/null || echo "No AppImage files found"
        echo "=== Searching for other build artifacts ==="
        find . -name "*.deb" -type f 2>/dev/null || echo "No .deb files found"
        find . -name "*.tar.gz" -type f 2>/dev/null || echo "No .tar.gz files found"
        find . -name "*.snap" -type f 2>/dev/null || echo "No .snap files found"
        
    - name: Find AppImage file
      id: find_appimage
      run: |
        # 在多个可能的位置查找AppImage文件
        APPIMAGE_PATH=$(find . \( -path "./node_modules" -prune \) -o \( -name "*.AppImage" -type f -print \) | head -1)
        
        if [ -n "$APPIMAGE_PATH" ] && [ -f "$APPIMAGE_PATH" ]; then
          echo "appimage_path=$APPIMAGE_PATH" >> $GITHUB_OUTPUT
          echo "appimage_name=$(basename $APPIMAGE_PATH)" >> $GITHUB_OUTPUT
          echo "appimage_size=$(du -h $APPIMAGE_PATH | cut -f1)" >> $GITHUB_OUTPUT
          echo "✅ Found AppImage: $APPIMAGE_PATH"
          echo "📦 File size: $(du -h $APPIMAGE_PATH | cut -f1)"
          
          # 验证AppImage文件
          file "$APPIMAGE_PATH"
          ls -lh "$APPIMAGE_PATH"
        else
          echo "❌ No AppImage found! Available files:"
          find . -name "electron*" -type f 2>/dev/null | head -10
          exit 1
        fi
        
    - name: Upload AppImage to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ElectronPlayer-Linux-AppImage-${{ github.sha }}
        path: ${{ steps.find_appimage.outputs.appimage_path }}
        retention-days: 30
        compression-level: 0  # AppImage已经压缩，跳过再次压缩
        
    - name: Upload build info
      uses: actions/upload-artifact@v4
      with:
        name: build-info-${{ github.sha }}
        path: |
          package.json
          package-lock.json
        retention-days: 7
        
    - name: Create Release (on tag push)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ steps.find_appimage.outputs.appimage_path }}
        name: Release ${{ github.ref_name }}
        body: |
          ## ElectronPlayer Linux AppImage
          
          📦 **File**: `${{ steps.find_appimage.outputs.appimage_name }}`
          📏 **Size**: ${{ steps.find_appimage.outputs.appimage_size }}
          🔨 **Built from**: `${{ github.sha }}`
          📅 **Build date**: ${{ github.run_started_at }}
          
          ### Installation
          1. Download the AppImage file
          2. Make it executable: `chmod +x ${{ steps.find_appimage.outputs.appimage_name }}`
          3. Run: `./${{ steps.find_appimage.outputs.appimage_name }}`
          
          ### Features
          - Cross-platform media player built with Electron and React
          - Supports multiple video and audio formats
          - Full-screen mode and screenshot capture
          - Playlist management and keyboard shortcuts
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🎉 Linux AppImage Build Complete!
            
            📦 **AppImage**: \`${{ steps.find_appimage.outputs.appimage_name }}\`
            📏 **Size**: ${{ steps.find_appimage.outputs.appimage_size }}
            
            You can download the AppImage from the [Actions artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).`
          })
