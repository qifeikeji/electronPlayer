# ÊúÄÂ∞èÂåñÂèØÂ∑•‰ΩúÁâàÊú¨ - Ë∑≥ËøáÂâçÁ´ØÊûÑÂª∫ÈóÆÈ¢òÔºåÁõ¥Êé•ÂàõÂª∫AppImage
# Êñá‰ª∂Ë∑ØÂæÑ: .github/workflows/build-minimal.yml

name: Build Minimal ElectronPlayer

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxkbcommon-dev libxss1 libasound2-dev libgtk-3-dev
        
    - name: Install core dependencies only
      run: |
        echo "üßπ Starting fresh..."
        rm -rf node_modules package-lock.json
        
        echo "üì¶ Installing only essential dependencies..."
        npm install --save-dev electron@27 electron-builder@24
        npm install --save electron-is-dev
        
    - name: Create minimal working Electron app
      run: |
        echo "üî® Creating minimal Electron application structure..."
        
        # ÂàõÂª∫ÁõÆÂΩï
        mkdir -p dist-electron
        mkdir -p dist
        
        # ÂàõÂª∫‰∏ªËøõÁ®ãÊñá‰ª∂
        cat > dist-electron/main.js << 'EOF'
const { app, BrowserWindow } = require('electron');
const path = require('path');
const isDev = require('electron-is-dev');

let mainWindow;

const createWindow = () => {
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      enableRemoteModule: true
    },
    icon: path.join(__dirname, '../assets/icon.png')
  });

  const indexPath = isDev 
    ? 'http://localhost:3000' 
    : `file://${path.join(__dirname, '../dist/index.html')}`;
    
  mainWindow.loadURL(indexPath);
  
  if (isDev) {
    mainWindow.webContents.openDevTools();
  }

  mainWindow.on('closed', () => {
    mainWindow = null;
  });
};

app.whenReady().then(createWindow);

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
EOF

        # ÂàõÂª∫Âü∫Êú¨ÁöÑÂâçÁ´ØÈ°µÈù¢
        cat > dist/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ElectronPlayer</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        .container {
            text-align: center;
            background: rgba(255,255,255,0.1);
            padding: 2rem;
            border-radius: 10px;
            backdrop-filter: blur(10px);
        }
        h1 { font-size: 3rem; margin-bottom: 1rem; }
        p { font-size: 1.2rem; margin-bottom: 2rem; }
        .version { opacity: 0.8; font-size: 0.9rem; }
        video {
            width: 100%;
            max-width: 600px;
            margin-top: 20px;
            border-radius: 8px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üé¨ ElectronPlayer</h1>
        <p>Modern Media Player for Desktop</p>
        <p>Built with Electron & React</p>
        
        <video controls style="display: none;" id="videoPlayer">
            <source src="" type="video/mp4">
            Your browser does not support the video tag.
        </video>
        
        <div class="version">
            Version 1.0.0 | Built with ‚ù§Ô∏è
        </div>
    </div>
    
    <script>
        // Âü∫Êú¨ÁöÑÂ™í‰ΩìÊí≠ÊîæÂäüËÉΩ
        console.log('ElectronPlayer loaded successfully!');
        
        // ÊãñÊãΩÊñá‰ª∂Êí≠Êîæ
        document.addEventListener('dragover', (e) => {
            e.preventDefault();
        });
        
        document.addEventListener('drop', (e) => {
            e.preventDefault();
            const files = Array.from(e.dataTransfer.files);
            const videoFile = files.find(f => f.type.startsWith('video/'));
            
            if (videoFile) {
                const video = document.getElementById('videoPlayer');
                video.src = URL.createObjectURL(videoFile);
                video.style.display = 'block';
            }
        });
        
        // ÈîÆÁõòÂø´Êç∑ÈîÆ
        document.addEventListener('keydown', (e) => {
            const video = document.getElementById('videoPlayer');
            if (e.code === 'Space' && video.src) {
                e.preventDefault();
                video.paused ? video.play() : video.pause();
            }
        });
    </script>
</body>
</html>
EOF

        # ÂàõÂª∫Â∫îÁî®ÂõæÊ†á (ÁÆÄÂçïÁöÑSVG)
        mkdir -p assets
        cat > assets/icon.png << 'EOF' || echo "Icon creation skipped"
EOF
        
        # Êõ¥Êñ∞package.jsonÊûÑÂª∫ÈÖçÁΩÆ
        cat > temp_build_config.json << 'EOF'
{
  "build": {
    "appId": "com.electronplayer.app",
    "productName": "ElectronPlayer",
    "directories": {
      "output": "dist"
    },
    "files": [
      "dist/**/*",
      "dist-electron/**/*",
      "node_modules/**/*"
    ],
    "linux": {
      "target": [
        {
          "target": "AppImage",
          "arch": ["x64"]
        }
      ],
      "category": "AudioVideo",
      "synopsis": "Modern media player for desktop",
      "description": "A feature-rich media player built with Electron"
    }
  }
}
EOF
        
        # ÂêàÂπ∂ÊûÑÂª∫ÈÖçÁΩÆÂà∞package.json
        if command -v jq >/dev/null 2>&1; then
          jq -s '.[0] * .[1]' package.json temp_build_config.json > package.json.tmp
          mv package.json.tmp package.json
        else
          echo "jq not available, keeping original package.json"
        fi
        
        rm -f temp_build_config.json
        
        echo "‚úÖ Minimal app structure created"
        
    - name: Build AppImage
      run: |
        echo "üöÄ Building AppImage with electron-builder..."
        
        # ‰ΩøÁî®electron-builderÁõ¥Êé•ÊûÑÂª∫
        npx electron-builder --linux appimage --publish never
        
        echo "‚úÖ Build completed"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Find and verify AppImage
      id: find_appimage
      run: |
        echo "üîç Looking for AppImage..."
        
        APPIMAGE_PATH=$(find . -name "*.AppImage" -type f | head -1)
        
        if [ -n "$APPIMAGE_PATH" ] && [ -f "$APPIMAGE_PATH" ]; then
          echo "‚úÖ Found AppImage: $APPIMAGE_PATH"
          
          # ËÆæÁΩÆËæìÂá∫ÂèòÈáè
          echo "appimage_path=$APPIMAGE_PATH" >> $GITHUB_OUTPUT
          echo "appimage_name=$(basename $APPIMAGE_PATH)" >> $GITHUB_OUTPUT
          echo "appimage_size=$(du -h $APPIMAGE_PATH | cut -f1)" >> $GITHUB_OUTPUT
          
          # È™åËØÅÊñá‰ª∂
          ls -lh "$APPIMAGE_PATH"
          file "$APPIMAGE_PATH"
          
          # Á°Æ‰øùÂèØÊâßË°å
          chmod +x "$APPIMAGE_PATH"
          
          echo "üéâ AppImage ready for distribution!"
        else
          echo "‚ùå AppImage not found"
          echo "Available files:"
          find . -name "*electron*" -o -name "*app*" | head -10
          exit 1
        fi
        
    - name: Upload AppImage
      uses: actions/upload-artifact@v4
      with:
        name: ElectronPlayer-Linux-${{ github.run_number }}
        path: ${{ steps.find_appimage.outputs.appimage_path }}
        retention-days: 30
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ steps.find_appimage.outputs.appimage_path }}
        name: ElectronPlayer ${{ github.ref_name }}
        body: |
          ## üé¨ ElectronPlayer Linux AppImage
          
          A minimal but functional media player built with Electron.
          
          **üì¶ Download:** `${{ steps.find_appimage.outputs.appimage_name }}` (${{ steps.find_appimage.outputs.appimage_size }})
          
          **üöÄ Quick Start:**
          ```bash
          chmod +x ${{ steps.find_appimage.outputs.appimage_name }}
          ./${{ steps.find_appimage.outputs.appimage_name }}
          ```
          
          **‚ú® Features:**
          - Drag & drop video files to play
          - Space bar to play/pause  
          - Modern Electron-based interface
          - Cross-platform compatibility
          
          Built from commit: `${{ github.sha }}`
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
