# 健壮版GitHub Action - 处理依赖同步问题
# 文件路径: .github/workflows/build-linux-robust.yml

name: Build Linux AppImage (Robust)

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        # 暂时不使用npm缓存，因为依赖版本不同步
        # cache: 'npm'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libnss3-dev \
          libatk-bridge2.0-dev \
          libdrm2 \
          libxkbcommon-dev \
          libxss1 \
          libasound2-dev \
          libgtk-3-dev \
          libxrandr2 \
          libasound2-dev \
          libpangocairo-1.0-0 \
          libatk1.0-0 \
          libcairo-gobject2 \
          libgtk-3-0 \
          libgdk-pixbuf2.0-0
        
    - name: Clean and install dependencies
      run: |
        echo "🧹 Cleaning existing node_modules and lock files..."
        rm -rf node_modules
        rm -f package-lock.json
        rm -f yarn.lock
        
        echo "📦 Installing dependencies from scratch..."
        npm install
        
        echo "🔍 Checking if electron-builder is available..."
        if ! npm list electron-builder &>/dev/null; then
          echo "⚠️ electron-builder not found, installing globally..."
          npm install -g electron-builder
        fi
        
        echo "✅ Dependency installation complete"
        
    - name: Verify project structure
      run: |
        echo "📁 Project structure:"
        ls -la
        echo "📄 Package.json scripts:"
        cat package.json | jq '.scripts' || echo "No jq available, showing raw package.json"
        echo "🔍 Looking for main entry point..."
        cat package.json | grep -E '"main":|"electron":|"build":' || echo "No main/electron/build config found"
        
    - name: Build React/Vite application
      run: |
        echo "🔨 Building frontend application..."
        if npm run build; then
          echo "✅ Frontend build successful"
        elif npm run dev:build; then
          echo "✅ Frontend build successful (dev:build)"
        else
          echo "⚠️ No standard build script found, trying manual Vite build..."
          npx vite build || echo "❌ Vite build failed"
        fi
      env:
        CI: false
        NODE_ENV: production
        
    - name: Build Electron application
      run: |
        echo "⚡ Building Electron application for Linux..."
        
        # 检查并创建必要的目录结构
        echo "📁 Setting up build directories..."
        mkdir -p dist-electron
        mkdir -p dist
        
        # 检查是否有 Electron 主进程文件
        if [ -f "electron/main.js" ]; then
          echo "📋 Found main.js in electron/ directory"
          cp electron/main.js dist-electron/main.js
        elif [ -f "src/main.js" ]; then
          echo "📋 Found main.js in src/ directory"  
          cp src/main.js dist-electron/main.js
        elif [ -f "main.js" ]; then
          echo "📋 Found main.js in root directory"
          cp main.js dist-electron/main.js
        else
          echo "⚠️ No main.js found, creating a basic one..."
          cat > dist-electron/main.js << 'EOF'
const { app, BrowserWindow } = require('electron');
const path = require('path');

const createWindow = () => {
  const mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    }
  });

  if (process.env.NODE_ENV === 'development') {
    mainWindow.loadURL('http://localhost:3000');
  } else {
    mainWindow.loadFile(path.join(__dirname, '../dist/index.html'));
  }
};

app.whenReady().then(createWindow);

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
EOF
        fi
        
        # 尝试多种构建方式
        if npm run electron:build; then
          echo "✅ Built with npm run electron:build"
        elif npm run build:linux; then
          echo "✅ Built with npm run build:linux"
        elif npm run dist; then
          echo "✅ Built with npm run dist"
        else
          echo "🔧 Trying direct electron-builder command..."
          
          # 确保有基本的 dist 内容
          if [ ! -f "dist/index.html" ]; then
            echo "⚠️ Creating basic dist/index.html..."
            cat > dist/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>ElectronPlayer</title>
</head>
<body>
    <div id="root">
        <h1>ElectronPlayer</h1>
        <p>Media Player Built with Electron</p>
    </div>
</body>
</html>
EOF
          fi
          
          # 直接使用electron-builder
          if command -v electron-builder &> /dev/null; then
            electron-builder --linux appimage --publish never
          else
            npx electron-builder --linux appimage --publish never
          fi
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CI: true
        
    - name: List all possible build outputs
      run: |
        echo "🔍 Searching for build outputs in entire project..."
        echo "=== AppImage files ==="
        find . -name "*.AppImage" -type f -exec ls -lh {} \; 2>/dev/null || echo "No AppImage files found"
        
        echo "=== DEB files ==="
        find . -name "*.deb" -type f -exec ls -lh {} \; 2>/dev/null || echo "No DEB files found"
        
        echo "=== Common build directories ==="
        for dir in dist build out release app-builds; do
          if [ -d "$dir" ]; then
            echo "Contents of $dir/:"
            ls -la "$dir/"
          fi
        done
        
        echo "=== Electron-builder output directory ==="
        if [ -d "dist" ]; then
          find dist -type f -name "*linux*" -o -name "*.AppImage" -o -name "*.deb" 2>/dev/null || echo "No Linux builds in dist/"
        fi
        
    - name: Find AppImage file
      id: find_appimage
      run: |
        echo "🔍 Looking for AppImage file..."
        
        # 搜索AppImage文件，排除node_modules
        APPIMAGE_PATH=$(find . \( -path "./node_modules" -prune \) -o \( -name "*.AppImage" -type f -print \) | head -1)
        
        if [ -n "$APPIMAGE_PATH" ] && [ -f "$APPIMAGE_PATH" ]; then
          echo "✅ Found AppImage: $APPIMAGE_PATH"
          echo "appimage_path=$APPIMAGE_PATH" >> $GITHUB_OUTPUT
          echo "appimage_name=$(basename $APPIMAGE_PATH)" >> $GITHUB_OUTPUT
          echo "appimage_size=$(du -h $APPIMAGE_PATH | cut -f1)" >> $GITHUB_OUTPUT
          
          # 验证文件
          echo "📊 File info:"
          ls -lh "$APPIMAGE_PATH"
          file "$APPIMAGE_PATH"
          
          # 检查是否可执行
          if [ -x "$APPIMAGE_PATH" ]; then
            echo "✅ AppImage is executable"
          else
            echo "⚠️ Making AppImage executable..."
            chmod +x "$APPIMAGE_PATH"
          fi
          
        else
          echo "❌ No AppImage found!"
          echo "🔍 All files in project:"
          find . -type f -name "*electron*" -o -name "*app*" -o -name "*.deb" -o -name "*.tar.gz" | head -20
          
          # 尝试手动构建
          echo "🔧 Attempting manual AppImage creation..."
          if command -v electron-builder &> /dev/null; then
            echo "Trying one more electron-builder attempt..."
            electron-builder --linux appimage --config.directories.output=manual-dist
            
            # 再次查找
            MANUAL_APPIMAGE=$(find . -name "*.AppImage" -type f | head -1)
            if [ -n "$MANUAL_APPIMAGE" ]; then
              echo "✅ Manual build successful: $MANUAL_APPIMAGE"
              echo "appimage_path=$MANUAL_APPIMAGE" >> $GITHUB_OUTPUT
              echo "appimage_name=$(basename $MANUAL_APPIMAGE)" >> $GITHUB_OUTPUT
              echo "appimage_size=$(du -h $MANUAL_APPIMAGE | cut -f1)" >> $GITHUB_OUTPUT
            else
              exit 1
            fi
          else
            exit 1
          fi
        fi
        
    - name: Upload AppImage to Artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: ElectronPlayer-Linux-AppImage-${{ github.run_number }}
        path: ${{ steps.find_appimage.outputs.appimage_path }}
        retention-days: 30
        compression-level: 0
        
    - name: Upload build logs (on failure)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          package.json
          package-lock.json
          npm-debug.log*
          *.log
        retention-days: 7
        
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/') && success()
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ steps.find_appimage.outputs.appimage_path }}
        name: Release ${{ github.ref_name }}
        body: |
          ## 🎉 ElectronPlayer Linux AppImage
          
          📦 **File**: `${{ steps.find_appimage.outputs.appimage_name }}`
          📏 **Size**: ${{ steps.find_appimage.outputs.appimage_size }}
          🔨 **Built from**: `${{ github.sha }}`
          
          ### 🚀 Quick Start
          ```bash
          # Download and run
          chmod +x ${{ steps.find_appimage.outputs.appimage_name }}
          ./${{ steps.find_appimage.outputs.appimage_name }}
          ```
          
          ### ✨ Features
          - 🎵 Multiple video and audio format support
          - 🎮 Keyboard shortcuts and intuitive controls  
          - 🖼️ Screenshot capture functionality
          - 📂 Playlist management
          - 🖥️ Full-screen mode
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
